"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/js-cookie";
exports.ids = ["vendor-chunks/js-cookie"];
exports.modules = {

/***/ "(ssr)/./node_modules/js-cookie/dist/js.cookie.js":
/*!**************************************************!*\
  !*** ./node_modules/js-cookie/dist/js.cookie.js ***!
  \**************************************************/
/***/ ((module) => {

eval("\n(function(global, factory) {\n     true ? module.exports = factory() : 0;\n})(void 0, function() {\n    \"use strict\";\n    /* eslint-disable no-var */ function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                target[key] = source[key];\n            }\n        }\n        return target;\n    }\n    /* eslint-enable no-var */ /* eslint-disable no-var */ var defaultConverter = {\n        read: function(value) {\n            if (value[0] === '\"') {\n                value = value.slice(1, -1);\n            }\n            return value.replace(/(%[\\dA-F]{2})+/gi, decodeURIComponent);\n        },\n        write: function(value) {\n            return encodeURIComponent(value).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g, decodeURIComponent);\n        }\n    };\n    /* eslint-enable no-var */ /* eslint-disable no-var */ function init(converter, defaultAttributes) {\n        function set(name, value, attributes) {\n            if (typeof document === \"undefined\") {\n                return;\n            }\n            attributes = assign({}, defaultAttributes, attributes);\n            if (typeof attributes.expires === \"number\") {\n                attributes.expires = new Date(Date.now() + attributes.expires * 864e5);\n            }\n            if (attributes.expires) {\n                attributes.expires = attributes.expires.toUTCString();\n            }\n            name = encodeURIComponent(name).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);\n            var stringifiedAttributes = \"\";\n            for(var attributeName in attributes){\n                if (!attributes[attributeName]) {\n                    continue;\n                }\n                stringifiedAttributes += \"; \" + attributeName;\n                if (attributes[attributeName] === true) {\n                    continue;\n                }\n                // Considers RFC 6265 section 5.2:\n                // ...\n                // 3.  If the remaining unparsed-attributes contains a %x3B (\";\")\n                //     character:\n                // Consume the characters of the unparsed-attributes up to,\n                // not including, the first %x3B (\";\") character.\n                // ...\n                stringifiedAttributes += \"=\" + attributes[attributeName].split(\";\")[0];\n            }\n            return document.cookie = name + \"=\" + converter.write(value, name) + stringifiedAttributes;\n        }\n        function get(name) {\n            if (typeof document === \"undefined\" || arguments.length && !name) {\n                return;\n            }\n            // To prevent the for loop in the first place assign an empty array\n            // in case there are no cookies at all.\n            var cookies = document.cookie ? document.cookie.split(\"; \") : [];\n            var jar = {};\n            for(var i = 0; i < cookies.length; i++){\n                var parts = cookies[i].split(\"=\");\n                var value = parts.slice(1).join(\"=\");\n                try {\n                    var found = decodeURIComponent(parts[0]);\n                    jar[found] = converter.read(value, found);\n                    if (name === found) {\n                        break;\n                    }\n                } catch (e) {}\n            }\n            return name ? jar[name] : jar;\n        }\n        return Object.create({\n            set,\n            get,\n            remove: function(name, attributes) {\n                set(name, \"\", assign({}, attributes, {\n                    expires: -1\n                }));\n            },\n            withAttributes: function(attributes) {\n                return init(this.converter, assign({}, this.attributes, attributes));\n            },\n            withConverter: function(converter) {\n                return init(assign({}, this.converter, converter), this.attributes);\n            }\n        }, {\n            attributes: {\n                value: Object.freeze(defaultAttributes)\n            },\n            converter: {\n                value: Object.freeze(converter)\n            }\n        });\n    }\n    var api = init(defaultConverter, {\n        path: \"/\"\n    });\n    /* eslint-enable no-var */ return api;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/js-cookie/dist/js.cookie.js\n");

/***/ })

};
;