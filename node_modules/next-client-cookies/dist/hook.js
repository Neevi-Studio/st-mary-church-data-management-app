"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var hook_exports = {};
__export(hook_exports, {
  useCookies: () => useCookies
});
module.exports = __toCommonJS(hook_exports);
var import_react = require("react");
var import_js_cookie = __toESM(require("js-cookie"));
var import_context = require("./context");
const useCookies = /* @__PURE__ */ __name(() => {
  const ctx = (0, import_react.useContext)(import_context.Ctx);
  const [, refresh] = (0, import_react.useState)(0);
  return (0, import_react.useMemo)(() => {
    const org = typeof window === "undefined" ? ctx : import_js_cookie.default;
    if (!org) {
      throw new Error("Missing <CookiesProvider>");
    }
    return {
      get: org.get.bind(org),
      set: (...args) => {
        org.set(...args);
        refresh((v) => v + 1);
      },
      remove: (...args) => {
        org.remove(...args);
        refresh((v) => v + 1);
      }
    };
  }, [
    ctx
  ]);
}, "useCookies");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useCookies
});
//# sourceMappingURL=hook.js.map